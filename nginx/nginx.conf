server {
    listen 80;
    server_name localhost;
    root /usr/share/nginx/html;

    # 全局处理 OPTIONS 预检请求
    # location / 会捕获所有请求，包括 OPTIONS
    location / {
        # 为所有响应（包括预检）添加 CORS 头
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
        
        if ($request_method = 'OPTIONS') {
            # 对于 OPTIONS 请求，添加完头后直接返回 204
            return 204;
        }

        # 对于非 OPTIONS 请求，继续尝试查找文件
        # 如果是图片，会匹配下面的 location；如果是 JSON，也会匹配
        try_files $uri $uri/ =404;
    }

    # 为 JSON 文件设置特定规则
    location ~ \.json$ {
        # 再次添加CORS头，防止继承问题
        add_header 'Access-Control-Allow-Origin' '*' always;

        # 禁用缓存
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        
        # 尝试文件，找不到则返回 404
        try_files $uri =404;
    }

    # 为图片文件设置特定规则
    location ~* \.(jpg|jpeg|png|gif)$ {
        # 再次添加CORS头，防止继承问题
        add_header 'Access-Control-Allow-Origin' '*' always;

        # 设置缓存
        add_header Cache-Control "public, max-age=2592000, immutable";

        # 找不到图片时返回空白图片
        try_files $uri /blank.png;
    }
    
    # 确保 /blank.png 自身也能被访问并有正确的头
    location = /blank.png {
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header Cache-Control "public, max-age=2592000, immutable";
    }
}